# -*- coding: utf-8 -*-
"""
AN√ÅLISIS DE TIENDAS ALURA STORE - VERSI√ìN EXCEL (.xlsx)
"""
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Configuraci√≥n de estilos (actualizada para matplotlib moderno)
try:
    plt.style.use('seaborn-v0_8')  # Estilo similar al antiguo 'seaborn'
except:
    plt.style.use('ggplot')  # Fallback seguro

sns.set_theme(style="whitegrid")
plt.rcParams['figure.figsize'] = (12, 6)

# ======================================
# 1. CARGA DE DATOS DESDE ARCHIVOS EXCEL
# ======================================
def cargar_datos_excel():
    """Carga datos desde archivos .xlsx con manejo de errores"""
    
    # Nombres de los archivos Excel locales
    archivos = {
        'Tienda 1': 'xls/tienda_1.xlsx',
        'Tienda 2': 'xls/tienda_2.xlsx',
        'Tienda 3': 'xls/tienda_3.xlsx',
        'Tienda 4': 'xls/tienda_4.xlsx'
    }
    
    datos_tiendas = []
    
    for nombre, archivo in archivos.items():
        try:
            if not os.path.exists(archivo):
                raise FileNotFoundError(f"Archivo {archivo} no encontrado")
            
            print(f"üìÇ Cargando {nombre} desde {archivo}...")
            
            # Leer Excel (usando la primera hoja por defecto)
            df = pd.read_excel(archivo, engine='openpyxl')  # Requiere pip install openpyxl
            df['tienda'] = nombre  # A√±adir columna identificadora
            
            datos_tiendas.append(df)
            print(f"‚úÖ {nombre} cargada correctamente (Registros: {len(df)})")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en {nombre}: {str(e)}")
            print("üîß Usando datos de ejemplo...")
            # Datos de respaldo
            datos_tiendas.append(pd.DataFrame({
                'Producto': [f'Producto {i}' for i in range(1, 6)],
                'Precio': [100, 200, 150, 300, 250],
                'Costo_envio': [10, 15, 12, 20, 18],
                'Calificaci√≥n': [4.0, 3.5, 4.2, 3.8, 4.5],
                'tienda': nombre
            }))
    
    return pd.concat(datos_tiendas, ignore_index=True)

# ======================================
# 2. PROCESAMIENTO DE DATOS
# ======================================
def procesar_datos(df):
    """Limpieza y c√°lculo de m√©tricas clave"""
    
    # Columnas num√©ricas (manejo seguro)
    numeric_cols = ['Precio', 'Costo_envio', 'Calificaci√≥n']
    for col in numeric_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        else:
            df[col] = 0  # Columna por defecto si no existe
    
    # M√©tricas por tienda
    analisis = df.groupby('tienda').agg({
        'Precio': ['sum', 'mean'],
        'Calificaci√≥n': 'mean',
        'Costo_envio': 'mean'
    })
    
    # Renombrar columnas
    analisis.columns = ['Facturaci√≥n_Total', 'Precio_Promedio', 
                       'Calificaci√≥n_Promedio', 'Costo_Env√≠o_Promedio']
    
    return analisis

# ======================================
# 3. VISUALIZACI√ìN CON SEABORN
# ======================================
def generar_visualizaciones(analisis):
    """Crea dashboard interactivo con los resultados"""
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('Dashboard de Rendimiento - Alura Store', fontsize=16)
    
    # Gr√°fico 1: Facturaci√≥n Total
    sns.barplot(
        x=analisis.index,
        y=analisis['Facturaci√≥n_Total'],
        ax=axes[0, 0],
        palette='Blues_d'
    )
    axes[0, 0].set_title('Facturaci√≥n por Tienda (USD)')
    axes[0, 0].ticklabel_format(style='plain', axis='y')
    
    # Gr√°fico 2: Calificaci√≥n Promedio
    sns.barplot(
        x=analisis.index,
        y=analisis['Calificaci√≥n_Promedio'],
        ax=axes[0, 1],
        palette='Greens_d'
    )
    axes[0, 1].set_title('Satisfacci√≥n del Cliente (1-5)')
    axes[0, 1].set_ylim(0, 5)
    
    # Gr√°fico 3: Costos de Env√≠o
    sns.barplot(
        x=analisis.index,
        y=analisis['Costo_Env√≠o_Promedio'],
        ax=axes[1, 0],
        palette='Reds_d'
    )
    axes[1, 0].set_title('Costo Promedio de Env√≠o (USD)')
    
    # Gr√°fico 4: Relaci√≥n Precio-Calificaci√≥n
    sns.scatterplot(
        x=analisis['Precio_Promedio'],
        y=analisis['Calificaci√≥n_Promedio'],
        size=analisis['Facturaci√≥n_Total'],
        sizes=(100, 500),
        ax=axes[1, 1],
        hue=analisis.index,
        palette='viridis',
        legend=False
    )
    axes[1, 1].set_title('Relaci√≥n Precio-Calificaci√≥n')
    
    plt.tight_layout()
    plt.savefig('dashboard_alura.png', dpi=300, bbox_inches='tight')
    plt.close()

# ======================================
# 4. RECOMENDACI√ìN AUTOMATIZADA
# ======================================
def generar_recomendacion(analisis):
    """Sistema de scoring para identificar la tienda menos eficiente"""
    
    # Normalizaci√≥n de m√©tricas (0-1)
    metrics = analisis.copy()
    metrics['Facturaci√≥n_Norm'] = metrics['Facturaci√≥n_Total'] / metrics['Facturaci√≥n_Total'].max()
    metrics['Calificaci√≥n_Norm'] = metrics['Calificaci√≥n_Promedio'] / 5
    metrics['Costo_Norm'] = 1 - (metrics['Costo_Env√≠o_Promedio'] / metrics['Costo_Env√≠o_Promedio'].max())
    
    # Ponderaci√≥n (ajustable)
    weights = {
        'Facturaci√≥n': 0.5,
        'Calificaci√≥n': 0.3,
        'Costo': 0.2
    }
    
    metrics['Puntaje_Final'] = (
        metrics['Facturaci√≥n_Norm'] * weights['Facturaci√≥n'] +
        metrics['Calificaci√≥n_Norm'] * weights['Calificaci√≥n'] +
        metrics['Costo_Norm'] * weights['Costo']
    )
    
    peor_tienda = metrics['Puntaje_Final'].idxmin()
    
    print("\n" + "="*60)
    print("   INFORME DE RECOMENDACI√ìN - ALURA STORE")
    print("="*60)
    
    print("\nüìä M√âTRICAS CLAVE:")
    print(analisis.sort_values('Facturaci√≥n_Total', ascending=False))
    
    print("\nüîç DETALLE DEL AN√ÅLISIS:")
    print(metrics[['Facturaci√≥n_Norm', 'Calificaci√≥n_Norm', 'Costo_Norm', 'Puntaje_Final']].sort_values('Puntaje_Final'))
    
    print(f"\nüö® RECOMENDACI√ìN: La tienda con menor rendimiento es {peor_tienda}")
    print("Principales motivos:")
    print(f"- Facturaci√≥n m√°s baja: ${metrics.loc[peor_tienda, 'Facturaci√≥n_Total']:,.2f}")
    print(f"- Calificaci√≥n m√°s baja: {metrics.loc[peor_tienda, 'Calificaci√≥n_Promedio']:.2f}/5")
    print(f"- Costo de env√≠o m√°s alto: ${metrics.loc[peor_tienda, 'Costo_Env√≠o_Promedio']:.2f}")

# ======================================
# EJECUCI√ìN PRINCIPAL
# ======================================
if __name__ == "__main__":
    print("üöÄ INICIANDO AN√ÅLISIS CON ARCHIVOS EXCEL...")
    
    # Paso 1: Cargar datos
    datos = cargar_datos_excel()
    
    # Paso 2: Procesar y analizar
    analisis = procesar_datos(datos)
    
    # Paso 3: Visualizaci√≥n
    generar_visualizaciones(analisis)
    
    # Paso 4: Recomendaci√≥n
    generar_recomendacion(analisis)
    
    print("\n‚úÖ AN√ÅLISIS COMPLETADO")
    print("üìä Dashboard guardado como 'dashboard_alura.png'")