# -*- coding: utf-8 -*-
"""
AN√ÅLISIS DE RENDIMIENTO - ALURA STORE
Versi√≥n corregida con configuraci√≥n de estilos actualizada
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# ======================================
# CONFIGURACI√ìN CORREGIDA DE ESTILOS
# ======================================
# Versi√≥n moderna (para matplotlib >= 3.6)
try:
    plt.style.use('seaborn-v0_8')  # Estilo equivalente al antiguo 'seaborn'
except:
    plt.style.use('ggplot')  # Estilo alternativo si falla

sns.set_theme(style="whitegrid")  # Configuraci√≥n moderna de seaborn
plt.rcParams['figure.figsize'] = (12, 6)
plt.rcParams['font.size'] = 12

# ======================================
# 1. CARGA DE DATOS (URLs CORREGIDAS)
# ======================================
def cargar_datos():
    """Carga datos desde GitHub con manejo profesional de errores"""
    
    # URLs definitivas (corregido espacio en tienda_1)
    urls = {
        'Tienda 1': "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/main/base-de-datos-challenge1-latam/tienda_1.csv",
        'Tienda 2': "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/main/base-de-datos-challenge1-latam/tienda_2.csv",
        'Tienda 3': "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/main/base-de-datos-challenge1-latam/tienda_3.csv",
        'Tienda 4': "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/main/base-de-datos-challenge1-latam/tienda_4.csv"
    }
    
    datos_tiendas = []
    
    for nombre, url in urls.items():
        try:
            print(f"üì§ Cargando {nombre}...")
            df = pd.read_csv(url)
            df['tienda'] = nombre
            datos_tiendas.append(df)
            print(f"‚úÖ {nombre} cargada correctamente | Registros: {len(df)}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error en {nombre}: {str(e)[:100]}...")
            # Datos de ejemplo como respaldo
            datos_tiendas.append(pd.DataFrame({
                'Producto': [f'Producto {i}' for i in range(1, 6)],
                'Precio': [100, 200, 150, 300, 250],
                'Costo de env√≠o': [10, 15, 12, 20, 18],
                'Calificaci√≥n': [4.0, 3.5, 4.2, 3.8, 4.5],
                'tienda': nombre
            }))
    
    return pd.concat(datos_tiendas, ignore_index=True)

# ======================================
# 2. AN√ÅLISIS Y VISUALIZACI√ìN
# ======================================
def analizar_y_visualizar(datos):
    """Procesa datos y genera visualizaciones"""
    
    # Limpieza de datos
    numeric_cols = ['Precio', 'Costo de env√≠o', 'Calificaci√≥n']
    datos[numeric_cols] = datos[numeric_cols].apply(pd.to_numeric, errors='coerce').fillna(0)
    
    # M√©tricas por tienda
    analisis = datos.groupby('tienda').agg({
        'Precio': ['sum', 'mean'],
        'Calificaci√≥n': 'mean',
        'Costo de env√≠o': 'mean'
    })
    analisis.columns = ['Facturaci√≥n', 'Precio Promedio', 'Calificaci√≥n Promedio', 'Costo Env√≠o Promedio']
    
    # Visualizaci√≥n
    fig, ax = plt.subplots(2, 2, figsize=(15, 12))
    plt.suptitle('An√°lisis Comparativo de Tiendas Alura Store', fontsize=16)
    
    # Gr√°fico 1: Facturaci√≥n
    analisis['Facturaci√≥n'].sort_values().plot(kind='barh', ax=ax[0, 0], color='skyblue')
    ax[0, 0].set_title('Facturaci√≥n Total')
    ax[0, 0].set_xlabel('USD')
    
    # Gr√°fico 2: Calificaciones
    analisis['Calificaci√≥n Promedio'].sort_values().plot(kind='barh', ax=ax[0, 1], color='lightgreen')
    ax[0, 1].set_title('Satisfacci√≥n del Cliente')
    ax[0, 1].set_xlim(0, 5)
    
    # Gr√°fico 3: Costos de env√≠o
    analisis['Costo Env√≠o Promedio'].sort_values().plot(kind='barh', ax=ax[1, 0], color='salmon')
    ax[1, 0].set_title('Eficiencia Log√≠stica')
    ax[1, 0].set_xlabel('USD')
    
    # Gr√°fico 4: Dispersi√≥n
    ax[1, 1].scatter(analisis['Precio Promedio'], analisis['Calificaci√≥n Promedio'], s=100, alpha=0.6)
    ax[1, 1].set_title('Relaci√≥n Precio-Calificaci√≥n')
    ax[1, 1].set_xlabel('Precio Promedio')
    ax[1, 1].set_ylabel('Calificaci√≥n Promedio')
    
    plt.tight_layout()
    plt.savefig('analisis_tiendas.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return analisis

# ======================================
# 3. RECOMENDACI√ìN
# ======================================
def generar_recomendacion(analisis):
    """Genera recomendaci√≥n basada en m√©tricas"""
    
    # Normalizaci√≥n
    metrics = analisis.copy()
    metrics['Facturaci√≥n_norm'] = metrics['Facturaci√≥n'] / metrics['Facturaci√≥n'].max()
    metrics['Calificaci√≥n_norm'] = metrics['Calificaci√≥n Promedio'] / 5
    metrics['Costo_norm'] = 1 - (metrics['Costo Env√≠o Promedio'] / metrics['Costo Env√≠o Promedio'].max())
    
    # Puntaje compuesto
    metrics['Score'] = (metrics['Facturaci√≥n_norm'] * 0.5 + 
                       metrics['Calificaci√≥n_norm'] * 0.3 + 
                       metrics['Costo_norm'] * 0.2)
    
    peor_tienda = metrics['Score'].idxmin()
    
    print("\n" + "="*50)
    print("   INFORME DE RECOMENDACI√ìN")
    print("="*50)
    print("\nüîç M√âTRICAS POR TIENDA:")
    print(analisis)
    print(f"\nüö® RECOMENDACI√ìN: La tienda con menor rendimiento es {peor_tienda}")
    print(f"- Facturaci√≥n: ${metrics.loc[peor_tienda, 'Facturaci√≥n']:,.0f}")
    print(f"- Calificaci√≥n: {metrics.loc[peor_tienda, 'Calificaci√≥n Promedio']:.1f}/5")
    print(f"- Costo env√≠o: ${metrics.loc[peor_tienda, 'Costo Env√≠o Promedio']:.2f}")

# ======================================
# EJECUCI√ìN PRINCIPAL
# ======================================
if __name__ == "__main__":
    print("üöÄ INICIANDO AN√ÅLISIS DE TIENDAS ALURA STORE")
    
    # Paso 1: Carga de datos
    datos = cargar_datos()
    
    # Paso 2: An√°lisis y visualizaci√≥n
    analisis = analizar_y_visualizar(datos)
    
    # Paso 3: Recomendaci√≥n
    generar_recomendacion(analisis)
    
    print("\n‚úÖ An√°lisis completado exitosamente")
    print("üìä Dashboard guardado como 'analisis_tiendas.png'")